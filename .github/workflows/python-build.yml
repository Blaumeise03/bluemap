name: Build and Upload Python Package

on:
  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload to PyPI'
        required: true
        type: boolean
        default: false
  push:
    branches:
      - main
  release:
    types:
      - published


permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup Cpp on Linux and macOS
        if: runner.os != 'Windows'
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc
          vcvarsall: false
          cmake: false
          ninja: false
          vcpkg: false

      - name: Setup Cpp on Windows
        if: runner.os == 'Windows'
        uses: aminya/setup-cpp@v1
        with:
          compiler: msvc
          vcvarsall: true
          architecture: x64
          cmake: false
          ninja: false
          vcpkg: false

      - name: Install build tools
        run: python -m pip install cibuildwheel==2.23.0 build

      - name: Build wheels
        env:
          CIBW_SKIP: "*-win32"
          MACOSX_DEPLOYMENT_TARGET: 14
        uses: pypa/cibuildwheel@v2.23.0

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build tools
        run: python -m pip install build

      - name: Build sdist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: source-dist
          path: dist/*.tar.gz

  upload_pypi:
    name: Deploy
    needs: [ build_wheels, build_sdist ]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.upload == 'true' || (github.event_name == 'release' && github.event.action == 'published') }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: 'cibw-*'
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          pattern: 'cibw-*'
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: source-dist
          path: dist

      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
        run: |
          python -m pip install twine
          python -m twine upload dist/*.tar.gz dist/*.whl --skip-existing
